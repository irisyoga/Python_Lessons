#данный код демонстрирует каким образом использовать экраование
print("hello from ")
#Операции над типами данных
#Сложение и деление для int и float
#При выполнении арифметических операций между int и float, результат всегда будет float, что обеспечивает точность вычислений.
a = 4
b = 5.5
result = a + b  # Результат: 9.5 (тип float)
division_result = a / b  # Результат: 0.7272727272727273 (тип float)
print(division_result)

#Операции с типом str (строки)
#Работа с текстовыми данными в Python позволяет гибко изменять, объединять и анализировать строки.
hello_world = "Hello" + " " + "World"  # Результат: "Hello World"
uppercase = hello_world.upper()  # Результат: "HELLO WORLD"
lowercase = hello_world.lower()  # Результат: "hello world"
print(hello_world)
print(uppercase)
print(lowercase)

length = len(hello_world)  # Результат: 11
contains_hello = "Hello" in hello_world  # Результат: True
contains_python = "Python" in hello_world  # Результат: False
new_greeting = hello_world.replace("World", "Python")  # Результат: "Hello Python"
#Дополнительные примеры для обсуждения
#Сравнение чисел: Использование операторов >, <, >=, <=, == для сравнения int и float.
#Преобразование типов: Как можно преобразовать строку в число и наоборот.
num_str = "123"
num = int(num_str)  # Преобразование строки в int: 123
float_str = "45.67"
num_float = float(float_str)  # Преобразование строки в float: 45.67
num_text = str(num)  # Результат: "123"
#Пример гибкой типизации данных в Python
#В Python переменные обладают гибкой типизацией, что означает, что тип данных переменной
# может изменяться во время выполнения программы. Это позволяет использовать одну и ту же переменную
# для хранения значений различных типов.
#Код для демонстрации гибкой типизации
x = 10
print("Тип x:", type(x), "Значение x:", x)
# Перезаписываем переменную x значением типа float
x = 10.5
print("Тип x:", type(x), "Значение x:", x)

# Перезаписываем переменную x значением типа str
x = "Python"
print("Тип x:", type(x), "Значение x:", x)

# Преобразование из десятичной системы в другие системы счисления

# Десятичное число
decimal_number = 42

# Преобразование в двоичную систему
binary_number = bin(decimal_number)  # '0b101010'
# bin() добавляет префикс '0b' перед двоичным значением

# Преобразование в восьмеричную систему
octal_number = oct(decimal_number)  # '0o52'
# oct() добавляет префикс '0o' перед восьмеричным значением

# Преобразование в шестнадцатеричную систему
hexadecimal_number = hex(decimal_number)  # '0x2a'
# hex() добавляет префикс '0x' перед шестнадцатеричным значением

# Вывод преобразованных значений
print("Двоичное представление:", binary_number)
print("Восьмеричное представление:", octal_number)
print("Шестнадцатеричное представление:", hexadecimal_number)

# Преобразование из других систем счисления обратно в десятичную

# Двоичное представление в формате строки
binary_str = binary_number  # '0b101010'
# Преобразование из двоичной системы в десятичную
decimal_from_binary = int(binary_str, 2)  # 42

# Восьмеричное представление в формате строки
octal_str = octal_number  # '0o52'
# Преобразование из восьмеричной системы в десятичную
decimal_from_octal = int(octal_str, 8)  # 42

# Шестнадцатеричное представление в формате строки
hexadecimal_str = hexadecimal_number  # '0x2a'
# Преобразование из шестнадцатеричной системы в десятичную
decimal_from_hex = int(hexadecimal_str, 16)  # 42

# Вывод результатов обратного преобразования
print("Обратное преобразование из двоичной в десятичную:", decimal_from_binary)
print("Обратное преобразование из восьмеричной в десятичную:", decimal_from_octal)
print("Обратное преобразование из шестнадцатеричной в десятичную:", decimal_from_hex)