
### Пример кода для изучения переменных, типов данных и комментариев в Python

# Однострочный комментарий (single-line comment):
# Начинается с символа # и используется для добавления заметок к коду.
# Переменные и типы данных
name = "Alice"  # строковая переменная (string)
age = 25        # числовая переменная (integer)
height = 1.75   # переменная с плавающей точкой (float)
is_student = True  # логическая переменная (boolean)

# Вывод значений переменных в консоль
print("Name:", name)
print("Age:", age)
print("Height:", height)
print("Is a student:", is_student)

#Математические операции с переменными
# Математические операции с переменными
a = 10
b = 3
sum_value = a + b       # сложение
diff_value = a - b      # вычитание
product_value = a * b   # умножение
quotient_value = a / b  # деление
remainder_value = a % b # остаток от деления

print("Sum:", sum_value)
print("Difference:", diff_value)
print("Product:", product_value)
print("Quotient:", quotient_value)
print("Remainder:", remainder_value)

# Переопределение значения переменной
age = age + 1   # увеличим возраст на 1
print("Updated age:", age)

#Переопределение переменной другим типом данных
# Python допускает изменение типа данных переменной,
# так как язык динамически типизированный.
# Например, строку можно заменить числом, как в примере выше.

# Переопределение переменной другим типом данных
name = "Alice"
print("Name with old value:", name)

name = 42  # теперь в переменной name хранится число, а не строка
print("Name with new value:", name)
#Copy

# Многострочный комментарий (multi-line comment):
# В Python многострочные комментарии можно оформлять
# с помощью тройных кавычек, как ниже.
# Их удобно использовать для пояснений или описаний в начале кода.
"""
Этот код показывает:
1. Объявление переменных разных типов данных (строка, число, float, boolean).
2. Математические операции с переменными.
3. Возможность переопределять значение и тип переменной.
4. Использование однострочных и многострочных комментариев.
"""
# Многострочные комментарии полезны, когда нужно
# объяснить несколько строк кода или задокументировать крупные блоки.